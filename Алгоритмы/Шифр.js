/**
*
*	Шифрование по алгоритму ГОСТ 28147-89.
*
**/

class ГОСТ_Шифр {

	static #Основной_шаг(N, X, K) {
		const S = N[0] + X & 0xFFFFFFFF;
		let S_ = 0;
		for (let сч = 0; сч < 4; сч++) {
			const яч = (S >>> (сч << 3)) & 0xFF;
			S_ +=
				K[сч * 2][яч & 0xF] +
				(K[сч * 2 + 1][яч >>> 4] << 4) << (сч << 3);
		}
		S_ =
			(S_ << 11) + (S_ >>> 21)
			& 0xFFFFFFFF ^ N[1];
		return [S_, N[0]];
	}

	static #Зашифрование(N, X, K) { // цикл 32–З
		for (let i = 0; i < 3; i++)
			for (let j = 0; j < 8; j++)
				N = this.#Основной_шаг(N, X[j], K);
		for (let i = 7; i >= 0; i--)
			N = this.#Основной_шаг(N, X[i], K);
		return [N[1], N[0]];
	}

	static #Расшифрование(N, X, K) { // цикл 32–Р
		for (let i = 0; i < 8; i++)
			N = this.#Основной_шаг(N, X[i], K);
		for (let i = 0; i < 3; i++)
			for (let j = 7; j >= 0; j--)
				N = this.#Основной_шаг(N, X[j], K);
		return [N[1], N[0]];
	}

	static #Выработка_имитовставки(N, X, K) { // цикл 16–З
		for (let i = 0; i < 2; i++)
			for (let j = 0; j < 8; j++)
				N = this.#Основной_шаг(N, X[j], K);
		return N;
	}

	static #Байты_из_числа(значение, длина) {
		const массив = new Uint8Array(длина);
		new DataView(массив.buffer).setUint32(0, значение, true);
		return массив;
	}

	static #Число_из_байтов(массив) {
		const буфер = new Uint8Array(4);
		буфер.set(массив);
		return new DataView(буфер.buffer).getUint32(0, true);
	}

	static Простая_замена( // режим простой замены
		T,	// данные (строка или массив 8-битных чисел)
		X,	// ключ (массив[8 <32-битных чисел>])
		K,	// таблица замен (массив[8 * 16 <4-битных чисел>])
		D	// направление шифрования (логическое, [да] для расшифрования)
	) { // возвращает преобразованный текст (строку) или массив 8-битных чисел в зависимости от входных данных
		if (!K) K = this.Стандартные_ТЗ[this.#Таблица_по_умолчанию];

		const результат = new Uint8Array(T.length);
		for (let сч = 0; сч < T.length; сч += 8) {
			let N = [
				this.#Число_из_байтов(T.slice(сч, сч + 4)),
				this.#Число_из_байтов(T.slice(сч + 4, сч + 8))
			];
			N = D ? this.#Расшифрование(N, X, K) : this.#Зашифрование(N, X, K);
			const данные = new Uint8Array(8);
			N.forEach((n, i) => данные.set(this.#Байты_из_числа(n, 4), i * 4));
			результат.set(данные, сч);
		}

		return результат;
	}

	static Гаммование( // режим гаммования
		T,	// данные (строка или массив 8-битных чисел)
		X,	// ключ (массив[8 <32-битных чисел>])
		K,	// таблица замен (массив[8 * 16 <4-битных чисел>])
		S	// синхропосылка (массив[2 <32-битных числа>])
	) { // возвращает преобразованный текст (строку) или массив 8-битных чисел в зависимости от входных данных
		if (!K) K = this.Стандартные_ТЗ[this.#Таблица_по_умолчанию];
		if (!S) S = [0, 0];

		const C1 = 0x1010101, C2 = 0x1010104;
		const результат = new Uint8Array(T.length);
		const A = this.#Зашифрование(S, X, K);
		for (let сч = 0; сч < T.length; сч += 8) {
			A[0] = (A[0] + C1) & 0xFFFFFFFF;
			if (A[1] > 0xFFFFFFFF - C2) A[1]++;
			A[1] = (A[1] + C2) & 0xFFFFFFFF;
			const
				Г = this.#Зашифрование(A, X, K),
				N = [
					this.#Число_из_байтов(T.slice(сч, сч + 4)) ^ Г[0],
					this.#Число_из_байтов(T.slice(сч + 4, сч + 8)) ^ Г[1]
				];
			const данные = new Uint8Array(8);
			N.forEach((n, i) => данные.set(this.#Байты_из_числа(n, 4), i * 4));
			const осталось = Math.min(T.length - сч, 8);
			результат.set(данные.slice(0, осталось), сч);
		}

		return результат;
	}

	static Гаммование_с_обратной_связью( // режим гаммования с обратной связью
		T,	// данные (строка или массив 8-битных чисел)
		X,	// ключ (массив[8 <32-битных чисел>])
		K,	// таблица замен (массив[8 * 16 <4-битных чисел>])
		S,	// синхропосылка (массив[2 <32-битных числа>])
		D	// направление шифрования (логическое, [да] для расшифрования)
	) { // возвращает преобразованный текст (строку) или массив 8-битных чисел в зависимости от входных данных
		if (!K) K = this.Стандартные_ТЗ[this.#Таблица_по_умолчанию];
		if (!S) S = [0, 0];

		const результат = new Uint8Array(T.length);
		for (let сч = 0; сч < T.length; сч += 8) {
			S = this.#Зашифрование(S, X, K);
			const
				T_0 = this.#Число_из_байтов(T.slice(сч, сч + 4)),
				T_1 = this.#Число_из_байтов(T.slice(сч + 4, сч + 8));
			S[0] = S[0] ^ T_0;
			S[1] = S[1] ^ T_1;
			const данные = new Uint8Array(8);
			S.forEach((s, i) => данные.set(this.#Байты_из_числа(s, 4), i * 4));
			const осталось = Math.min(T.length - сч, 8);
			результат.set(данные.slice(0, осталось), сч);
			if (D) {
				S[0] = T_0;
				S[1] = T_1;
			}
		}

		return результат;
	}

	static Имитовставка( // режим выработки имитовставки
		T,	// данные (строка или массив 8-битных чисел)
		X,	// ключ (массив[8 <32-битных чисел>])
		K	// таблица замен (массив[8 * 16 <4-битных чисел>])
	) { // возвращает имитовставку (строку[4] или массив[8 * <8-битных чисел>])
		if (!K) K = this.Стандартные_ТЗ[this.#Таблица_по_умолчанию];

		let S = [0, 0];
		for (let сч = 0; сч < T.length; сч += 8) {
			S[0] = this.#Число_из_байтов(T.slice(сч, сч + 4)) ^ S[0];
			S[1] = this.#Число_из_байтов(T.slice(сч + 4, сч + 8)) ^ S[1];
			S = this.#Выработка_имитовставки(S, X, K);
		}

		const результат = new Uint8Array(8);
		S.forEach((s, i) => данные.set(this.#Байты_из_числа(s, 4), i * 4));
		return результат;
	}

	static #Таблица_по_умолчанию = 5;

	static Стандартные_ТЗ = [
		[ // [0] Gost28147-89-TestParamSet
			[4, 2, 15, 5, 9, 1, 0, 8, 14, 3, 11, 12, 13, 7, 10, 6],
			[12, 9, 15, 14, 8, 1, 3, 10, 2, 7, 4, 13, 6, 0, 11, 5],
			[13, 8, 14, 12, 7, 3, 9, 10, 1, 5, 2, 4, 6, 15, 0, 11],
			[14, 9, 11, 2, 5, 15, 7, 1, 0, 13, 12, 6, 10, 4, 3, 8],
			[3, 14, 5, 9, 6, 8, 0, 13, 10, 11, 7, 12, 2, 1, 15, 4],
			[8, 15, 6, 11, 1, 9, 12, 5, 13, 3, 7, 10, 0, 14, 2, 4],
			[9, 11, 12, 0, 3, 6, 7, 5, 4, 8, 14, 15, 1, 10, 2, 13],
			[12, 6, 5, 2, 11, 0, 9, 13, 3, 14, 7, 10, 15, 4, 1, 8]
		],
		[ // [1] Gost28147-89-CryptoPro-A-ParamSet
			[9, 6, 3, 2, 8, 11, 1, 7, 10, 4, 14, 15, 12, 0, 13, 5],
			[3, 7, 14, 9, 8, 10, 15, 0, 5, 2, 6, 12, 11, 4, 13, 1],
			[14, 4, 6, 2, 11, 3, 13, 8, 12, 15, 5, 10, 0, 7, 1, 9],
			[14, 7, 10, 12, 13, 1, 3, 9, 0, 2, 11, 4, 15, 8, 5, 6],
			[11, 5, 1, 9, 8, 13, 15, 0, 14, 4, 2, 3, 12, 7, 10, 6],
			[3, 10, 13, 12, 1, 2, 0, 11, 7, 5, 9, 4, 8, 15, 14, 6],
			[1, 13, 2, 9, 7, 10, 6, 0, 8, 12, 4, 5, 15, 3, 11, 14],
			[11, 10, 15, 5, 0, 12, 14, 8, 6, 2, 3, 9, 1, 7, 13, 4]
		],
		[ // [2] Gost28147-89-CryptoPro-B-ParamSet
			[8, 4, 11, 1, 3, 5, 0, 9, 2, 14, 10, 12, 13, 6, 7, 15],
			[0, 1, 2, 10, 4, 13, 5, 12, 9, 7, 3, 15, 11, 8, 6, 14],
			[14, 12, 0, 10, 9, 2, 13, 11, 7, 5, 8, 15, 3, 6, 1, 4],
			[7, 5, 0, 13, 11, 6, 1, 2, 3, 10, 12, 15, 4, 14, 9, 8],
			[2, 7, 12, 15, 9, 5, 10, 11, 1, 4, 0, 13, 6, 8, 14, 3],
			[8, 3, 2, 6, 4, 13, 14, 11, 12, 1, 7, 15, 10, 0, 9, 5],
			[5, 2, 10, 11, 9, 1, 12, 3, 7, 4, 13, 0, 6, 15, 8, 14],
			[0, 4, 11, 14, 8, 3, 7, 1, 10, 2, 9, 6, 15, 13, 5, 12]
		],
		[ // [3] Gost28147-89-CryptoPro-C-ParamSet
			[1, 11, 12, 2, 9, 13, 0, 15, 4, 5, 8, 14, 10, 7, 6, 3],
			[0, 1, 7, 13, 11, 4, 5, 2, 8, 14, 15, 12, 9, 10, 6, 3],
			[8, 2, 5, 0, 4, 9, 15, 10, 3, 7, 12, 13, 6, 14, 1, 11],
			[3, 6, 0, 1, 5, 13, 10, 8, 11, 2, 9, 7, 14, 15, 12, 4],
			[8, 13, 11, 0, 4, 5, 1, 2, 9, 3, 12, 14, 6, 15, 10, 7],
			[12, 9, 11, 1, 8, 14, 2, 4, 7, 3, 6, 5, 10, 0, 15, 13],
			[10, 9, 6, 8, 13, 14, 2, 0, 15, 3, 5, 11, 4, 1, 12, 7],
			[7, 4, 0, 5, 10, 2, 15, 14, 12, 6, 1, 11, 13, 9, 3, 8]
		],
		[ // [4] Gost28147-89-CryptoPro-D-ParamSet
			[15, 12, 2, 10, 6, 4, 5, 0, 7, 9, 14, 13, 1, 11, 8, 3],
			[11, 6, 3, 4, 12, 15, 14, 2, 7, 13, 8, 0, 5, 10, 9, 1],
			[1, 12, 11, 0, 15, 14, 6, 5, 10, 13, 4, 8, 9, 3, 7, 2],
			[1, 5, 14, 12, 10, 7, 0, 13, 6, 2, 11, 4, 9, 3, 15, 8],
			[0, 12, 8, 9, 13, 2, 10, 11, 7, 3, 6, 5, 4, 14, 15, 1],
			[8, 0, 15, 3, 2, 5, 14, 11, 1, 10, 4, 7, 12, 9, 13, 6],
			[3, 0, 6, 15, 1, 14, 9, 2, 13, 8, 12, 4, 11, 10, 5, 7],
			[1, 10, 6, 8, 15, 11, 0, 4, 12, 3, 5, 9, 7, 13, 2, 14]
		],
		[ // [5] tc26-gost-28147-param-Z
			[12, 4, 6, 2, 10, 5, 11, 9, 14, 8, 13, 7, 0, 3, 15, 1],
			[6, 8, 2, 3, 9, 10, 5, 12, 1, 14, 4, 7, 11, 13, 0, 15],
			[11, 3, 5, 8, 2, 15, 10, 13, 14, 1, 7, 4, 12, 9, 6, 0],
			[12, 8, 2, 1, 13, 4, 15, 6, 7, 0, 10, 5, 3, 14, 9, 11],
			[7, 15, 5, 10, 8, 1, 6, 13, 0, 9, 3, 14, 11, 4, 2, 12],
			[5, 13, 15, 6, 9, 2, 12, 10, 11, 7, 8, 1, 4, 3, 14, 0],
			[8, 14, 2, 5, 6, 9, 1, 12, 15, 4, 11, 0, 13, 10, 3, 7],
			[1, 7, 14, 13, 0, 5, 8, 3, 4, 15, 10, 6, 9, 12, 11, 2]
		],
		[ // [6] GostR3410-94-TestParamSet
			[4, 10, 9, 2, 13, 8, 0, 14, 6, 11, 1, 12, 7, 15, 5, 3],
			[14, 11, 4, 12, 6, 13, 15, 10, 2, 3, 8, 1, 0, 7, 5, 9],
			[5, 8, 1, 13, 10, 3, 4, 2, 14, 15, 12, 7, 6, 0, 9, 11],
			[7, 13, 10, 1, 0, 8, 9, 15, 14, 4, 6, 12, 11, 2, 5, 3],
			[6, 12, 7, 1, 5, 15, 13, 8, 4, 10, 9, 14, 0, 3, 11, 2],
			[4, 11, 10, 0, 7, 2, 1, 13, 3, 6, 8, 5, 9, 12, 15, 14],
			[13, 11, 4, 1, 3, 15, 5, 9, 0, 10, 14, 7, 6, 8, 2, 12],
			[1, 15, 13, 0, 5, 7, 10, 4, 9, 2, 3, 14, 6, 11, 8, 12]
		],
		[ // [7] GostR3410-94-CryptoProParamSet
			[10, 4, 5, 6, 8, 1, 3, 7, 13, 12, 14, 0, 9, 2, 11, 15],
			[5, 15, 4, 0, 2, 13, 11, 9, 1, 7, 6, 3, 12, 14, 10, 8],
			[7, 15, 12, 14, 9, 4, 1, 0, 3, 11, 5, 2, 6, 10, 8, 13],
			[4, 10, 7, 12, 0, 15, 2, 8, 14, 1, 6, 5, 13, 11, 9, 3],
			[7, 6, 4, 11, 9, 12, 2, 10, 1, 8, 0, 14, 15, 13, 3, 5],
			[7, 6, 2, 4, 13, 9, 15, 0, 10, 1, 5, 11, 8, 14, 12, 3],
			[13, 14, 4, 1, 7, 0, 5, 10, 3, 12, 8, 15, 6, 2, 9, 11],
			[1, 3, 10, 9, 5, 11, 4, 15, 8, 6, 7, 14, 13, 0, 2, 12]
		],
		[ // [8] EACParamSet
			[11, 4, 8, 10, 9, 7, 0, 3, 1, 6, 2, 15, 14, 5, 12, 13],
			[1, 7, 14, 9, 11, 3, 15, 12, 0, 5, 4, 6, 13, 10, 8, 2],
			[7, 3, 1, 9, 2, 4, 13, 15, 8, 10, 12, 6, 5, 0, 11, 14],
			[10, 5, 15, 7, 14, 11, 3, 9, 2, 8, 1, 12, 0, 4, 6, 13],
			[0, 14, 6, 11, 9, 3, 8, 4, 12, 15, 10, 5, 13, 7, 1, 2],
			[9, 2, 11, 12, 0, 4, 5, 6, 3, 15, 13, 8, 1, 7, 14, 10],
			[4, 0, 14, 1, 5, 11, 8, 3, 12, 2, 9, 7, 6, 10, 13, 15],
			[7, 14, 12, 13, 9, 4, 8, 15, 10, 2, 6, 0, 3, 11, 5, 1]
		],
		[ // [9] ДКЕ-А-001
			[10, 9, 13, 6, 14, 11, 4, 5, 15, 1, 3, 12, 7, 0, 8, 2],
			[8, 0, 12, 4, 9, 6, 7, 11, 2, 3, 1, 15, 5, 14, 10, 13],
			[15, 6, 5, 8, 14, 11, 10, 4, 12, 0, 3, 7, 2, 9, 1, 13],
			[3, 8, 13, 9, 6, 11, 15, 0, 2, 5, 12, 10, 4, 14, 1, 7],
			[15, 8, 14, 9, 7, 2, 0, 13, 12, 6, 1, 5, 11, 4, 3, 10],
			[2, 8, 9, 7, 5, 15, 0, 11, 12, 1, 13, 14, 10, 3, 6, 4],
			[3, 8, 11, 5, 6, 4, 14, 10, 2, 12, 1, 7, 9, 15, 13, 0],
			[1, 2, 3, 14, 6, 13, 11, 8, 15, 10, 12, 5, 7, 9, 0, 4]
		]
	];
}

module.exports = ГОСТ_Шифр;
